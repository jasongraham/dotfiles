#!/bin/bash
# Manually rebuild and install an AUR package

set -eu -o pipefail

readonly PKG=$1

if ! pacman -Q "$PKG" &> /dev/null ; then
    echo "$PKG is not installed, aborting"
    exit 1
fi

if pacman -Qe "$PKG" &> /dev/null ; then
    EXP_OR_DEP="--asexplicit"
elif pacman -Qd "$PKG" &> /dev/null ; then
    EXP_OR_DEP="--asdeps"
else
    echo "Could not determine if '$PKG' was installed explicitly or as a dependency. Aborting."
    exit 2
fi
readonly EXP_OR_DEP

readonly REPO="aurto"
readonly REPOPATH=/var/cache/pacman/"$REPO"

setup_build_dir() {
    local -r BUILD_ROOT="$HOME"/.cache/aurutils/sync

    if [ ! -d "$BUILD_ROOT"/"$PKG" ] ; then
        cd "$BUILD_ROOT"
        aur fetch "$PKG"
    fi

    echo "$BUILD_ROOT"/"$PKG"
}

BUILD_DIR=$(setup_build_dir)
readonly BUILD_DIR

perform_build() {
    cd "$BUILD_DIR"

    aur build \
        --database="$REPO" \
        --makepkg-conf=/etc/aurto/makepkg-chroot.conf \
        --pacman-conf=/etc/aurto/pacman-chroot.conf \
        --force \
        --remove \
        --chroot \
        "$PKG"
}

if perform_build ; then
    readonly PKGARRAY=("$REPOPATH"/"$PKG"*)
    if [ ${#PKGARRAY[@]} -eq 0 ] ; then
        echo "Failed to find package matching $PKG in $REPOPATH"
        exit 3
    fi
    if [ ${#PKGARRAY[@]} -gt 1 ] ; then
        echo "Found multiple matches for $PKG in $REPOPATH"
        exit 4
    fi

    readonly PKGPATH="${PKGARRAY[0]}"
    if [ ! -f "$PKGPATH" ] ; then
        echo "Match $PKGPATH for package $PKG in $REPOPATH is not a file"
        exit 5
    fi

    # Install packages from database
    sudo pacman \
        --upgrade \
        "$EXP_OR_DEP" \
        "$PKGPATH"
fi
