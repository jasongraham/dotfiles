#!/bin/bash
# vim: ft=bash
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

{{ if .headless -}}
# This is not a login shell, but we still want the environment variables
# in /etc/environment
# Sometimes, like when using tmux, a non-login shell becomes a login-shell
if ! shopt -q login_shell; then
    PATH_TMP=$PATH
    while read -r line; do export "$line?"; done < /etc/environment
    export PATH=$PATH_TMP:${PATH:1:${#PATH}-2}
    unset PATH_TMP
fi

{{ end -}}

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
# export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
export HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

function stopwatch(){
    local date1
    date1=$(date +%s)
    while true; do
        echo -ne "$(date -u --date @$(($(date +%s) - date1)) +%H:%M:%S)\r"
        sleep 0.2
    done
}

# group PATH modifications as early as possible
export PATH="$HOME"/bin:"$HOME"/.local/bin:"$PATH"

if [ -d "$HOME"/.cargo/bin ]; then
    export PATH="$HOME"/.cargo/bin:$PATH
    export RUST_SRC_PATH="$HOME"/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src
fi

if [ "$(command -v pyenv)" ] || [ -d "$HOME"/.pyenv/bin ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi

# Bash Completion under sudo and man
#complete -cf sudo
#complete -cf man

# Alias definitions.

# enable color support of ls and also add handy aliases
if [[ $(command -v eza) ]]; then
    alias ls='eza --group-directories-first --sort=extension'
    alias ll='ls --long --header --git'
else
    alias ls='ls --color=auto --group-directories-first --sort=extension'
    alias ll='ls --long --human-readable'
fi
alias la='ls -a'

alias grep='grep --color=auto'
alias whoareyou='echo "I'\''m a freaking computer, dumbass."'

if [[ $(command -v batcat) ]]; then
    export MANPAGER="sh -c 'col -bx | batcat -l man -p'"
    export MANROFFOPT="-c"
    alias bat='batcat'
    alias cat='batcat'
elif [[ $(command -v bat) ]]; then
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
    export MANROFFOPT="-c"
    alias cat='bat'
else
    export MANPAGER="less -R --use-color -Dd+r -Du+b"
    export MANROFFOPT="-P -c"
fi

[[ $(command -v nvim) ]] && alias vim='nvim'
[ "$TERM" = "xterm-kitty" ] && alias ssh="kitty +kitten ssh"

# Disable Pango in Firefox
export MOZ_DISABLE_PANGO=1

export EDITOR=nvim

[ -f "$HOME"/.dircolors ] && eval "$(dircolors -b "$HOME"/.dircolors)"

# Spit out reminders when I open a terminal, if there is a reminders file
if [ -f "$HOME"/.reminders ] && [[ $(command -v remind) ]]; then
    /usr/bin/remind "$HOME"/.reminders
fi

# Start ssh-agent
if [ "$(command -v ssh-agent)" ] ; then
    if ! pgrep -u "$USER" ssh-agent > /dev/null; then
        ssh-agent -t 1h > "$XDG_RUNTIME_DIR/ssh-agent.env"
    fi
    if [[ ! -S "$SSH_AUTH_SOCK" ]]; then
        source "$XDG_RUNTIME_DIR/ssh-agent.env" > /dev/null
    fi
fi

[[ $(command -v starship) ]] && eval "$(starship init bash)"

# Provide 2 version strings, and check that
# the first is LTE than the second
verlte() {
    printf '%s\n' "$1" "$2" | sort -C -V
}

if [[ $(command -v fzf) ]]; then
    if verlte "0.48.0" "$(fzf --version | cut -d ' ' -f1)" ; then
        # fzf supports this with versions starting at 0.48.0
        eval "$(fzf --bash)"
    else
{{- if (eq .chezmoi.osRelease.id "ubuntu") }}
        source /usr/share/bash-completion/completions/fzf
        source /usr/share/doc/fzf/examples/key-bindings.bash
{{- else }}
        source /usr/share/fzf/completion.bash
        source /usr/share/fzf/key-bindings.bash
{{- end }}
    fi

    if [[ $(command -v fd) ]]; then
        export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
        export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND --type=d"

        _fzf_compgen_path() {
            fd --hidden --exclude .git . "$1"
        }

        _fzf_compgen_dir() {
            fd --type=d --hidden --exclude .git . "$1"
        }
    fi

    if [[ $(command -v eza) ]] && [[ $(command -v bat) ]]; then
        show_file_or_dir_preview="if [ -d {} ]; then eza --tree --color=always {} | head -200; else bat -n --color=always --line-range :500 {}; fi"
        show_file_tree='eza --tree --color=always {} | head -200'

        export FZF_CTRL_T_OPTS="--preview '$show_file_or_dir_preview'"
        export FZF_ALT_C_OPTS="--preview '$show_file_tree'"

        _fzf_comprun() {
            local command=$1
            shift

            case "$command" in
                cd|pushd|rmdir) fzf --preview "$show_file_tree"           "$@" ;;
                export|unset)   fzf --preview "eval 'echo \${}'"          "$@" ;;
                ssh|telnet)     fzf --preview 'dig {}'                    "$@" ;;
                unalias)        fzf --preview 'alias {}'                  "$@" ;;
                *)              fzf --preview "$show_file_or_dir_preview" "$@" ;;
            esac
        }
    fi

    [ -d "$HOME"/.local/share/fzf-git.sh ] && source "$HOME"/.local/share/fzf-git.sh/fzf-git.sh
fi

if [[ $(command -v zoxide) ]]; then
    eval "$(zoxide init --cmd cd bash)"
fi

if [[ $(command -v yazi) ]]; then
function yy() {
	local tmp
    tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd" || rm -f -- "$tmp"
	fi
	rm -f -- "$tmp"
}
fi
